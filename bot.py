import os
import asyncio
from datetime import datetime
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
FILE_NAME = "congratulations.txt"
SECRET_CODE = "0410"
ADMIN_ID = 946997781  # —Ç–≤–æ–π Telegram ID

# === –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–º ===
def load_congratulations():
    if os.path.exists(FILE_NAME):
        with open(FILE_NAME, "r", encoding="utf-8") as f:
            return [line.strip() for line in f.readlines()]
    return []

def save_all_congratulations():
    with open(FILE_NAME, "w", encoding="utf-8") as f:
        for congrats in congratulations:
            f.write(congrats + "\n")

congratulations = load_congratulations()

# === –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üéÇ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="get")],
        [InlineKeyboardButton("üéÅ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="add")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="delete")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç üëã! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    username = f"@{user.username}" if user.username else user.first_name
    file_id, content, message_type = None, "", ""

    if update.message.text:
        message_type, content = "–¢–µ–∫—Å—Ç", update.message.text
    elif update.message.photo:
        message_type, file_id, content = "–§–æ—Ç–æ", update.message.photo[-1].file_id, "[–§–æ—Ç–æ]"
    elif update.message.video:
        message_type, file_id, content = "–í–∏–¥–µ–æ", update.message.video.file_id, "[–í–∏–¥–µ–æ]"
    elif update.message.voice:
        message_type, file_id, content = "–ì–æ–ª–æ—Å–æ–≤–æ–µ", update.message.voice.file_id, "[–ì–æ–ª–æ—Å–æ–≤–æ–µ]"
    else:
        message_type, content = "–î—Ä—É–≥–æ–µ", "[–í–ª–æ–∂–µ–Ω–∏–µ]"

    congrats = f"{date} | {username} ({user.id}) | {message_type}: {content}"
    congratulations.append(congrats)
    if file_id:
        congratulations.append(f"file_id: {file_id}")

    save_all_congratulations()
    await update.message.reply_text(f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (ID: {len(congratulations)})")

async def get(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /get –ö–û–î")
        return
    if context.args[0] != SECRET_CODE:
        await update.message.reply_text("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")
        return
    if not congratulations:
        await update.message.reply_text("üéÇ –ü–æ–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")
        return

    for i, congrats in enumerate(congratulations, start=1):
        if not congrats.startswith("file_id:"):
            await update.message.reply_text(f"[{i}] {congrats}")
        else:
            file_id = congrats.split("file_id: ")[1]
            try:
                await update.message.reply_photo(file_id)
            except:
                try:
                    await update.message.reply_video(file_id)
                except:
                    try:
                        await update.message.reply_voice(file_id)
                    except:
                        await update.message.reply_text("[–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞]")

async def delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /delete ID")
        return
    try:
        idx = int(context.args[0]) - 1
        if 0 <= idx < len(congratulations):
            removed = congratulations.pop(idx)
            save_all_congratulations()
            await update.message.reply_text(f"üóë –£–¥–∞–ª–µ–Ω–æ: {removed}")
        else:
            await update.message.reply_text("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π ID")
    except ValueError:
        await update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "get":
        await query.edit_message_text("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏:\n/get –ö–û–î")
    elif query.data == "add":
        await query.edit_message_text("–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—é üéâ")
    elif query.data == "delete":
        await query.edit_message_text("–£–¥–∞–ª–∏—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑: /delete ID")

# === Flask + Webhook ===
app_flask = Flask(__name__)
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL")  # Render –ø–æ–¥—Å—Ç–∞–≤–∏—Ç

application = Application.builder().token(TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("get", get))
application.add_handler(CommandHandler("delete", delete))
application.add_handler(CallbackQueryHandler(button))
application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))

@app_flask.route("/")
def home():
    return "‚úÖ Telegram bot is running on Render!"

@app_flask.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    asyncio.run(application.process_update(update))
    return "ok"

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    asyncio.run(application.bot.set_webhook(url=f"{WEBHOOK_URL}/{TOKEN}"))
    app_flask.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
